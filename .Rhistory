#a/ visualization of the graph
plot.igraph(misgraph)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
#Density ?
#Diameter of the graph
diameter(misgraph, weight = NA)
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=3)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
dat <- read.table("lesmis.txt" , header = FALSE , sep = "\t")
misgraph <- simplify(graph.data.frame(dat, directed = FALSE))
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph)
set.seed(0)
#a/ visualization of the graph
plot.igraph(misgraph)
set.seed(0)
#a/ visualization of the graph
plot.igraph(misgraph)
set.seed(0)
#a/ visualization of the graph
plot.igraph(misgraph)
set.seed(0)
#a/ visualization of the graph
plot.igraph(misgraph)
#a/ visualization of the graph
plot.igraph(misgraph,mark.col = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph,mark.col = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph,mark.col = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph,mark.col = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph,mark.col, size = 20)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 20)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 30)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 50)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.size = 15)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.size = 25)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.col = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red")
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 3)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", label.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.color = "red", text.cex = 10)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, label.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, label.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, label.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, vertex.cex = 0.5)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, label.cex = 0.5)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,36]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,3]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,2]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[1,]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
len(V(misgraph))
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
length(V(misgraph))
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
length(A(misgraph))
co <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=10, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
length(E(misgraph))
77*76/2
254/2926
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
dat <- read.table("lesmis.txt" , header = FALSE , sep = "\t")
misgraph <- simplify(graph.data.frame(dat, directed = FALSE))
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
star <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=star, vertex.size=10, edge.arrow.size=10, xlim=range(star[,1]),
ylim=range(star[,2]), rescale=F, vertex.label.dist=0)
#Is the graph complete ?
length(V(misgraph))
degree(misgraph)
#Diameter of the graph
diameter(misgraph, weight = NA)
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
#building the dissimilarity matrix
sim <- similarity(graph = misgraph, method = "jaccard")
dissimilarity <- matrix(data = 1, nrow = 77, ncol = 77) - sim
#hierarchical clustering
mishclust <- hclust(d = as.dist(dissimilarity), method = "complete")
mod = c()
for(i in 1:10)
{
#cut into the number i of clusters
labels = cutree(mishclust ,i)
#Computes the modularity in each subset of clustering
mod[i] = modularity(x=misgraph , membership = labels)
}
plot(1:10, mod , type = "b", col ="blue", title = "Modularity as a function of number of clusters",
xlab = "Number of clusters", ylab = "Modularity")
V(misgraph)$color = cutree(mishclust, 9) #Is this right ?
display_graph(15) #9 communities
plot(mishclust, cex = 0.6, labels = V(misgraph)$name)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
dat <- read.table("lesmis.txt" , header = FALSE , sep = "\t")
misgraph <- simplify(graph.data.frame(dat, directed = FALSE))
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0)
star <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=star, vertex.size=10, edge.arrow.size=10, xlim=range(star[,1]),
ylim=range(star[,2]), rescale=F, vertex.label.dist=0)
length(V(misgraph))
degree(misgraph)
#Diameter of the graph
diameter(misgraph, weight = NA)
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
#building the dissimilarity matrix
sim <- similarity(graph = misgraph, method = "jaccard")
dissimilarity <- matrix(data = 1, nrow = 77, ncol = 77) - sim
#hierarchical clustering
mishclust <- hclust(d = as.dist(dissimilarity), method = "complete")
mod = c()
for(i in 1:10)
{
#cut into the number i of clusters
labels = cutree(mishclust ,i)
#Computes the modularity in each subset of clustering
mod[i] = modularity(x=misgraph , membership = labels)
}
plot(1:10, mod , type = "b", col ="blue", title = "Modularity as a function of number of clusters",
xlab = "Number of clusters", ylab = "Modularity")
V(misgraph)$color = cutree(mishclust, 9) #Is this right ?
display_graph(15) #9 communities
plot(mishclust, cex = 0.6, labels = V(misgraph)$name)
help("degree")
degree(misgraph)
max(degree(misgraph))
degree(misgraph)+10
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_nicely(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_nicely(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_nicely(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_nicely(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_as_star(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, rescale = FALSE)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, rescale = FALSE, xlim=range(l[,1]), ylim=range(l[,2]))
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, rescale = FALSE, xlim=range(l[,1]), ylim=range(l[,2]), vertex.label.dist=0)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, rescale = FALSE)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, frame = 1)
}
display_graph(3) #WTF
star <- layout_as_star(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=star, vertex.size=10, edge.arrow.size=10, xlim=range(star[,1]),
ylim=range(star[,2]), rescale=F, vertex.label.dist=0, frame = 1)
set.seed(0)
#We first change the size of the font of labels
V(misgraph)$label.cex <- 0.5
#We apply a layout_nicely that will choose a nice layout algorithm for our graph
co <- layout_nicely(misgraph)
#We plot the graph by playing with some parameters such as the size of vertex etc.
plot.igraph(misgraph, layout=co, vertex.size=100, edge.arrow.size=10, xlim=range(co[,1]),
ylim=range(co[,2]), rescale=F, vertex.label.dist=0, frame = 1)
#a/ visualization of the graph
set.seed(0)
plot.igraph(misgraph, frame = 1)
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, frame = 1)
}
display_graph(3) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, frame = 1)
}
display_graph(10) #WTF
display_graph <- function(size){
set.seed(3)
V(misgraph)$label.cex <- (degree(misgraph)+10)/max(degree(misgraph))
# l <- layout_with_fr(misgraph)
l <- layout_with_fr(misgraph)
plot.igraph(misgraph, layout=l, vertex.size=size, frame = 1)
}
display_graph(3) #WTF
#building the dissimilarity matrix
sim <- similarity(graph = misgraph, method = "jaccard")
dissimilarity <- matrix(data = 1, nrow = 77, ncol = 77) - sim
#hierarchical clustering
mishclust <- hclust(d = as.dist(dissimilarity), method = "complete")
mod = c()
for(i in 1:10)
{
#cut into the number i of clusters
labels = cutree(mishclust ,i)
#Computes the modularity in each subset of clustering
mod[i] = modularity(x=misgraph , membership = labels)
}
plot(1:10, mod , type = "b", col ="blue", title = "Modularity as a function of number of clusters",
xlab = "Number of clusters", ylab = "Modularity")
